#!/usr/bin/env node

// TODO: Yank out per-WR queries (like timesheets) into post processing
// TODO: Add timesheet-centric output variant

var _       = require('underscore')._,
    db      = require('./db.js'),
    wrms_cli= require('./wrms_cli.js'),
    bind    = require('./common.js').bind,
    die     = require('./common.js').die,
    getopt  = require('posix-getopt');

function usage(){
    die(
        'Usage: wrms-cli [options] <wr...>' +
        '\n\t--allocated-to <user> (Filter by case-insensitive regex, e.g. "james|sam")' +
        '\n\t--host <db-host=\033[1m' + db.config.host + '\033[0m>' +
        '\n\t--format [\033[1mpretty\033[0m|csv]' +
        '\n\t--port <port=\033[1m' + db.config.port + '\033[0m>' +
        '\n\t--sort-by [wr|brief|\033[1mstatus\033[0m]' +
        '\n\t--verbose' +
        '\n\t--debug' +
        ''
    );
}

var config = {
    sort_by: 'status',
    allocated_to: null,
    output: 'pretty',
    verbose: false,
    debug: false
};

(function(){
    var parser = new getopt.BasicParser('d(debug)v(verbose)a:(allocated-to)f:(format)s:(sort-by)h:(host)p:(port)', process.argv);
    var option = undefined;
    while ((option = parser.getopt()) !== undefined){
        switch (option.option){
            case 'a':
                config.allocated_to = option.optarg;
                break;
            case 'h':
                db.config.host = option.optarg;
                break;
            case 's':
                if (option.optarg.match(/^(wr|brief|status)$/)){
                    config.sort_by = option.optarg;
                }else{
                    usage();
                }
                break;
            case 'f':
                if (option.optarg.match(/^(pretty|csv)$/)){
                    config.output = option.optarg;
                }else{
                    usage();
                }
                break;
            case 'p':
                db.config.port = parseInt(option.optarg);
                if (isNaN(db.config.port)){
                    die('Invalid database port "' + option.optarg + '"');
                }
                break;
            case 'd':
                config.debug = true;
                break;
            case 'v':
                config.verbose = true;
                break;
        }
    }
    var wrs = process.argv.slice(parser.optind());
    if (wrs.length < 1){
        usage();
    }

    wrms_cli.init({
        config: config,
        db: db
    });
    db.init().then(bind(wrms_cli.run, wrs)).fail(die);
})();

