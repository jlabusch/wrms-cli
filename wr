#!/usr/bin/env node

var pg      = require('pg'),
    q       = require('kew'),
    _       = require('underscore')._,
    assert  = require('assert'),
    getopt  = require('posix-getopt');

function usage(){
    die(
        'Usage: wrms-cli [options] <wr...>' +
        '\n\t--allocated-to <user> (Filter by case-insensitive substring regex, e.g. "james|sam")' +
        '\n\t--host <db-host=\033[1m' + config.db.host + '\033[0m>' +
        '\n\t--format [\033[1mpretty\033[0m|csv]' +
        '\n\t--port <port=\033[1m' + config.db.port + '\033[0m>' +
        '\n\t--sort-by [wr|brief|\033[1mstatus\033[0m]' +
        '\n\t--verbose' +
        ''
    );
}

var config = {
    db: {
        user: 'wrms_readonly',
        password: '',
        database: 'wrms',
        host: 'db1.db.catalyst.net.nz',
        port: 5433
    },
    sort_by: 'status',
    allocated_to: null,
    output: 'pretty',
    verbose: false,
    wrs: []
};

var db = null;

(function(){
    var parser = new getopt.BasicParser('v(verbose)a:(allocated-to)f:(format)s:(sort-by)h:(host)p:(port)', process.argv);
    var option = undefined;
    while ((option = parser.getopt()) !== undefined){
        switch (option.option){
            case 'a':
                config.allocated_to = option.optarg;
                break;
            case 'h':
                config.db.host = option.optarg;
                break;
            case 's':
                if (option.optarg.match(/^(wr|brief|status)$/)){
                    config.sort_by = option.optarg;
                }else{
                    usage();
                }
                break;
            case 'f':
                if (option.optarg.match(/^(pretty|csv)$/)){
                    config.output = option.optarg;
                }else{
                    usage();
                }
                break;
            case 'p':
                config.db.port = parseInt(option.optarg);
                if (isNaN(config.db.port)){
                    die('Invalid database port "' + option.optarg + '"');
                }
                break;
            case 'v':
                config.verbose = true;
                break;
        }
    }
    config.wrs = process.argv.slice(parser.optind());
    if (config.wrs.length < 1){
        usage();
    }

    db_connector(config.db)
        .then(bind(iterate_over_children, 0, null, config.wrs, function(){process.exit(0);})).fail(die)
        ;
})();

function db_connector(cfg){
    db = new pg.Client(cfg);
    var p = q.defer();
    db.connect(p.makeNodeResolver());
    return p.promise;
}

function fetch_children(wr){
    var sql =   'select rr.to_request_id as wr, ' +
                       'r.brief, ' +
                       'lc.lookup_desc ' +
                'from request_request rr ' +
                'join request r on r.request_id=rr.to_request_id ' +
                'left join lookup_code lc on lc.source_table=\'request\' and ' +
                                            'lc.source_field=\'status_code\' and ' +
                                            'lc.lookup_code=r.last_status ' +
                'where rr.request_id=$1 and ' +
                      'rr.link_type=\'I\' ' +
                'order by ' + (config.sort_by === 'wr'      ? 'rr.to_request_id' :
                               config.sort_by === 'brief'   ? 'r.brief'
                                                            : 'lc.lookup_seq,lc.lookup_desc');
    var p = q.defer();
    db.query(sql, [wr], p.makeNodeResolver());
    return p.promise
            .then(bind(grab, 'rows')).fail(die)
            ;
}

function iterate_over_children(depth, parent_wr, child_wrs, on_completion){
    if (typeof(on_completion) !== 'function'){
        on_completion = function(){};
    }
    var next = child_wrs.shift();
    if (!next){
        on_completion();
        return;
    }
    next = next.wr || next;
    if (wr_cache[next]){
        return load_child(depth, next)
                .then(bind(iterate_over_children, depth, parent_wr, child_wrs, on_completion)).fail(die)
                ;
    }
    return load_child(depth, next)
            .then(bind(fetch_children, next)).fail(die)
            .then(bind(iterate_over_children, depth+1, next)).fail(die)
            .then(bind(iterate_over_children, depth, parent_wr, child_wrs, on_completion)).fail(die)
            ;
}

var wr_cache = {};

function cache(wr){
    wr_cache[wr.wr] = wr;
    return wr;
}

function squash(rows){
    assert(rows.length !== undefined);
    var r = rows[0];
    r.fullname = [r.fullname || 'Nobody'];
    rows.slice(1).forEach(function(i){
        r.fullname.push(i.fullname);
    });
    return r;
}

function load_child(depth, wr){
    return (function(){
        if (wr_cache[wr]){
            wr_cache[wr].from_cache = true;
            return q.resolve(wr_cache[wr]);
        }else{
            var sql =   'select r.request_id as wr,' +
                               'r.brief,' +
                               'lc.lookup_desc as status,' +
                               '(select usr.fullname from usr where usr.user_no=rall.allocated_to_id) as fullname, ' +
                               'r.detailed, ' +
                               'r.requested_by_date, ' +
                               'r.agreed_due_date ' +
                        'from request r ' +
                        'left join request_allocated rall on rall.request_id=r.request_id ' +
                        'left join lookup_code lc on lc.source_table=\'request\' and ' +
                                                    'lc.lookup_code=r.last_status ' +
                        'where r.request_id=$1';
            var p = q.defer();
            db.query(sql, [wr], p.makeNodeResolver());
            return p.promise
                    .then(bind(grab, 'rows')).fail(die)
                    .then(squash)
                    .then(bind(load_child_quotes, wr))
                    .then(bind(load_child_timesheets, wr))
                    //.then(tap('result of timesheets: '))
                    .then(cache);
                    ;
        }
    })().then(print_wr(depth))
        ;
}

function load_child_quotes(wr, obj){
    var sql = 'select sum(quote_amount),quote_units,bool(approved_by_id) as approved ' +
              'from request_quote ' +
              'where request_id=$1 ' +
              'group by quote_units,approved';
    var p = q.defer();
    db.query(sql, [wr], p.makeNodeResolver());
    return p.promise
            .then(bind(function(n, o, rows){ o.quotes = rows.rows; return o; }, wr, obj));
}

function load_child_timesheets(wr, obj){
    function grab_hours(n, o, rows){
        o.timesheet_hours = 0;
        if (rows.rows.length > 0 && rows.rows[0].sum){
            o.timesheet_hours = rows.rows[0].sum;
        }
        return o;
    }
    var sql = "select sum(hours) from request_activity where request_id=$1 and source='timesheet'";
    var p = q.defer();
    db.query(sql, [wr], p.makeNodeResolver());
    return p.promise
            .then(bind(grab_hours, wr, obj));
}

function maybe_log(msg){
    console.info(msg);
}

function tap(msg){
    return function(obj){
        maybe_log(msg + JSON.stringify(obj));
        maybe_log('---');
        return obj;
    }
}

var closed_statuses = ['Finished', 'Cancelled', 'Reviewed', 'Production Ready', 'Testing/Signoff', 'QA Approved'],
    new_statuses= ['New Request', 'Allocated'],
    blocked_statuses= ['Blocked', 'On Hold', 'Quoted', 'Need Info'];

var need_to_print_header = true;

function print_wr(depth){
    function any_match(re, list){
        var m = false;
        _.each(list, function(i){
            if (i.match(re)){
                m = true;
            }
        });
        return m;
    }
    return function(o){
        if (need_to_print_header){
            need_to_print_header = false;
            if (config.output === 'csv'){
                console.log('WR#,Brief,Status,Allocated to,Timesheet hours,Quoted ($ approved),Quoted ($ unapproved),Quoted (hours approved),Quoted (hours unapproved),Detail,Due date,Depth');
            }
        }

        var indent = '';
        var origdepth = depth;
        while (depth > 0){
            indent += '    ';
            --depth;
        }
        if (config.allocated_to){
            if (!any_match(new RegExp(config.allocated_to, "i"), o.fullname)){
                return o;
            }
        }
        if (config.output === 'pretty'){
            var color = {
                wr: '\033[37;1m',
                brief: '\033[0m',
                status: _.contains(closed_statuses, o.status) ? '\033[32m' :
                        _.contains(new_statuses,    o.status) ? '\033[33m' :
                        _.contains(blocked_statuses,o.status) ? '\033[36m' : '\033[33m'
            };
            if (wr_cache[o.wr].from_cache){
                color.wr = color.brief = color.status = '\033[30m';
            }
            console.log(
                indent +
                color.wr + '#' + o.wr + ': ' +
                color.brief + o.brief +
                color.status + ' [' + o.status + ']\033[0m'
            );
            if (config.verbose && !wr_cache[o.wr].from_cache){
                var quote_str = _.map(o.quotes, function(q){ return q.sum + ' ' + q.quote_units + ' (' + (q.approved ? 'approved' : 'unapproved') + ')';}).join(',');
                quote_str = quote_str || 'nothing';
                console.log(
                    indent + '\033[30m' + '             ' +
                    'Allocated to ' + o.fullname.join('/') +
                    ', worked ' + o.timesheet_hours + 'h, quoted ' + quote_str +
                    '\033[0m'
                );
            }
        }else{
            if (wr_cache[o.wr].from_cache){
                // Don't print it
            }else{
                var quotes = {
                    u: {
                        dollars: 0,
                        hours: 0
                    },
                    a: {
                        dollars: 0,
                        hours: 0
                    }
                };
                _.each(o.quotes, function(q){
                    var type = q.approved ? quotes.a : quotes.u;
                    switch (q.quote_units){
                        case 'aud':
                        case 'dollars':
                        case 'usd':
                        case 'pounds':
                        case 'amount':
                            type.dollars += q.sum;
                            break;
                        case 'days':
                            type.hours += q.sum*8;
                            break;
                        case 'hours':
                            type.hours += q.sum;
                            break;
                    }
                });
                var brief = o.brief.replace(/,/g, '.');
                var detail = config.verbose ? o.detailed.replace(/,/g, '.').replace(/\n/g, '') : '';
                var due = o.agreed_due_date || o.requested_by_date;
                console.log([o.wr, brief, o.status, o.fullname.join('/'), o.timesheet_hours, quotes.a.dollars, quotes.u.dollars, quotes.a.hours, quotes.u.hours, detail, due, origdepth].join(','));
            }
        }
        return o;
    };
}

function grab(field, obj){
    return obj[field];
}

function bind(fn /*, ...*/){
    var bound_args = Array.prototype.slice.call(arguments, 1);
    return function(){
        var args = bound_args.concat(Array.prototype.slice.call(arguments, 0));
        return fn.apply(this, args);
    };
}

function any_values_exist(obj){
    var result = false;
    _.each(obj, function(val){
        if (val){
            result = true;
        }
    });
    return result;
}

function die(m, r){
    r = r || 1;
    console.error(m);
    process.exit(r);
}

